
def horizontal_line(row, col, matrix, row_len, line_len)
  return 0 if col > row_len - line_len
  (0...line_len).inject(1) { |tot, i| matrix[row][col + i] * tot }
end

def vertical_line(row, col, matrix, col_len, line_len)
  return 0 if row > col_len - line_len
  (0...line_len).inject(1) { |tot, i| matrix[row + i][col] * tot }
end

def slash_line(row, col, matrix, row_len, col_len, line_len)
  out_of_bounds = col < line_len - 1 || row > col_len - line_len
  return 0 if out_of_bounds
  (0...line_len).inject(1) { |tot, i| matrix[row + i][col - i] * tot }
end

def back_slash_line(row, col, matrix, row_len, col_len, line_len)
  out_of_bounds = col > row_len - line_len || row > col_len - line_len
  return 0 if out_of_bounds
  (0...line_len).inject(1) { |tot, i| matrix[row + i][col + i] * tot }
end

def max_for_pos(row, col, matrix, line_length)
  row_length = matrix[0].length
  col_length = matrix.length
  [
    horizontal_line(row, col, matrix, row_length, line_length),
    vertical_line(row, col, matrix, col_length, line_length),
    slash_line(row, col, matrix, col_length, line_length),
    back_slash_line(row, col, matrix, row_length, col_length, line_length)
  ]
end


tst = [
  [1,1,1,1],
  [2,1,3,1],
  [1,1,1,1],
  [1,1,1,1]
]

p(max_for_pos(1,1,tst,2))
